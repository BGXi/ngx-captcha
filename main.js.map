{"version":3,"sources":["webpack:///./demo/$_lazy_route_resource lazy namespace object","webpack:///./demo/main.ts","webpack:///./demo/src/demo.component.html","webpack:///./demo/src/demo.component.ts","webpack:///./demo/src/demo.module.ts","webpack:///./demo/src/demo.routes.ts","webpack:///./demo/src/installation.component.html","webpack:///./demo/src/installation.component.ts","webpack:///./demo/src/invisible-recaptcha-demo.component.html","webpack:///./demo/src/invisible-recaptcha-demo.component.ts","webpack:///./demo/src/re-captcha-2-demo.component.html","webpack:///./demo/src/re-captcha-2-demo.component.ts","webpack:///./src/index.ts","webpack:///./src/ngx-captcha.module.ts","webpack:///./src/recaptcha/base-recaptcha.component.ts","webpack:///./src/recaptcha/invisible-recaptcha.component.ts","webpack:///./src/recaptcha/recaptcha-2.component.ts","webpack:///./src/recaptcha/recaptcha-type.enum.ts","webpack:///./src/recaptcha/recaptcha.config.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,6E;;;;;;;;;;;;;;;ACX2E;AAE5B;AAE/C,gGAAsB,EAAE,CAAC,eAAe,CAAC,2DAAU,CAAC;KACjD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC;;;;;;;;;;;;ACNlC,wiD;;;;;;;;;;;;;;;;;;;;;ACA0C;AAM1C;IAJA;QAMS,SAAI,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;IACzC,CAAC;IAHY,aAAa;QAJzB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;SAErB,CAAC;OACW,aAAa,CAGzB;IAAD,oBAAC;CAAA;AAHyB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNe;AACiB;AACX;AAEF;AACI;AACN;AACsB;AACsB;AACf;AAqBxE;IAAA;IAA0B,CAAC;IAAd,UAAU;QAnBtB,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,uEAAa;gBACb,qDAAgB,CAAC,OAAO,CAAC;oBACvB,iBAAiB,EAAE,0CAA0C;oBAC7D,uBAAuB,EAAE,0CAA0C;iBACpE,CAAC;gBACF,uDAAU;aACX;YACD,YAAY,EAAE;gBACZ,6DAAa;gBACb,mGAA+B;gBAC/B,oFAAuB;gBACvB,6EAAqB;aACtB;YAED,SAAS,EAAE,CAAC,6DAAa,CAAC;SAC3B,CAAC;OACW,UAAU,CAAI;IAAD,iBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BkB;AACM;AAGwC;AACf;AACP;AAyBjE;IAAA;IAA0B,CAAC;IAAd,UAAU;QAvBtB,8DAAQ,CAAC;YACN,YAAY,EAAE,EACb;YACD,OAAO,EAAE;gBACL,4DAAY,CAAC,OAAO,CAAC;oBACjB;wBACI,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,oFAAuB;qBAC/C;oBACD;wBACI,IAAI,EAAE,cAAc,EAAE,SAAS,EAAE,6EAAqB;qBACzD;oBACD;wBACI,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,mGAA+B;qBAChE;oBACD;wBACI,IAAI,EAAE,YAAY,EAAE,SAAS,EAAE,oFAAuB;qBACzD;iBACJ,CAAC;aACL;YACD,OAAO,EAAE;gBACL,4DAAY;aACf;SACJ,CAAC;OACW,UAAU,CAAI;IAAD,iBAAC;CAAA;AAAJ;;;;;;;;;;;;AC/BvB,0c;;;;;;;;;;;;;;;;;;;;;ACA4D;AAO5D;IAHA;QAKkB,gBAAW,GAAG,yBAAyB,CAAC;QAExC,qBAAgB,GAAG,oRAcpC,CAAC;QAEgB,gBAAW,GAAG,uKAQ/B,CAAC;IAWF,CAAC;IATC,kDAAkB,GAAlB;QACE,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAEO,wCAAQ,GAAhB;QACE,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjB,EAAE,CAAC,WAAW,EAAE,CAAC;QACnB,CAAC;IACH,CAAC;IAtCU,qBAAqB;QAHjC,+DAAS,CAAC;;SAEV,CAAC;OACW,qBAAqB,CAuCjC;IAAD,4BAAC;CAAA;AAvCiC;;;;;;;;;;;;ACPlC,8xJ;;;;;;;;;;;;;;;;;;;;;;;;;ACAsG;AAE9C;AAQxD;IAyBE,yCAAoB,GAAsB;QAAtB,QAAG,GAAH,GAAG,CAAmB;QAvB1B,gBAAW,GAAG,kLAO/B,CAAC;QAEO,oBAAe,GAAG,KAAK,CAAC;QACxB,mBAAc,GAAG,KAAK,CAAC;QAGvB,UAAK,GAA4C,QAAQ,CAAC;IAWjE,CAAC;IALD,4DAAkB,GAAlB;QACE,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAKD,iDAAO,GAAP;QACE,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED,uDAAa,GAAb,UAAc,eAAuB;QACnC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;IAC3B,CAAC;IAED,oDAAU,GAAV;QACE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;IAC3B,CAAC;IAED,qDAAW,GAAX,UAAY,KAA8D;QAA9D,6CAA8D;QACxE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,oDAAU,GAAV,UAAW,IAAuB;QAChC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,qDAAW,GAAX;QACE,IAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;QAChD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,KAAK,CAAC,qHAAqH,CAAC,CAAC;QAC/H,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,KAAK,CAAC,QAAQ,CAAC,CAAC;QAClB,CAAC;IACH,CAAC;IAED,gDAAM,GAAN;QACE,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC;IACnC,CAAC;IAED,sDAAY,GAAZ;QACE,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC,CAAC;IACzC,CAAC;IAED,+CAAK,GAAL;QACE,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;IAClC,CAAC;IAED,4DAAkB,GAAlB;QACE,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,CAAC,CAAC;IAC/C,CAAC;IAEO,kDAAQ,GAAhB;QACE,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjB,EAAE,CAAC,WAAW,EAAE,CAAC;QACnB,CAAC;IACH,CAAC;IA9DyB;QAAzB,+DAAS,CAAC,aAAa,CAAC;kCAAc,gEAA2B;wEAAC;IAC3C;QAAvB,+DAAS,CAAC,WAAW,CAAC;kCAAY,wDAAU;sEAAC;IAnBnC,+BAA+B;QAJ3C,+DAAS,CAAC;YACT,QAAQ,EAAE,8BAA8B;;SAEzC,CAAC;yCA0ByB,+DAAiB;OAzB/B,+BAA+B,CAiF3C;IAAD,sCAAC;CAAA;AAjF2C;;;;;;;;;;;;ACV5C,wmL;;;;;;;;;;;;;;;;;;;;;;;;;ACAsG;AAEtD;AAQhD;IAwCE,iCAAoB,GAAsB;QAAtB,QAAG,GAAH,GAAG,CAAmB;QAtC1B,gBAAW,GAAG,6BACN,CAAC;QAET,qBAAgB,GAAG,uLASR,CAAC;QAEZ,gBAAW,GAAG,iOASd,CAAC;QAEV,oBAAe,GAAG,KAAK,CAAC;QACxB,mBAAc,GAAG,KAAK,CAAC;QACvB,qBAAgB,GAAG,KAAK,CAAC;QAGzB,UAAK,GAAqB,OAAO,CAAC;QAClC,SAAI,GAAyB,QAAQ,CAAC;QACtC,SAAI,GAAG,IAAI,CAAC;IAOnB,CAAC;IAED,oDAAkB,GAAlB;QACE,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAED,+CAAa,GAAb,UAAc,eAAuB;QACnC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;IAC3B,CAAC;IAED,4CAAU,GAAV;QACE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;IAC3B,CAAC;IAED,8CAAY,GAAZ;QACE,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAC5B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;IAC3B,CAAC;IAED,6CAAW,GAAX,UAAY,KAAuB;QACjC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,4CAAU,GAAV,UAAW,IAA0B;QACnC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,4CAAU,GAAV,UAAW,IAAuB;QAChC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,6CAAW,GAAX;QACE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC;IACjD,CAAC;IAED,oDAAkB,GAAlB;QACE,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,CAAC,CAAC;IAC/C,CAAC;IAED,6CAAW,GAAX;QACE,IAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;QAChD,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,KAAK,CAAC,oDAAoD,CAAC,CAAC;QAC9D,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,KAAK,CAAC,QAAQ,CAAC,CAAC;QAClB,CAAC;IACH,CAAC;IAED,wCAAM,GAAN;QACE,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC;IACnC,CAAC;IAED,8CAAY,GAAZ;QACE,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC,CAAC;IACzC,CAAC;IAED,uCAAK,GAAL;QACE,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;IAClC,CAAC;IAEO,0CAAQ,GAAhB;QACE,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjB,EAAE,CAAC,WAAW,EAAE,CAAC;QACnB,CAAC;IACH,CAAC;IA1EyB;QAAzB,+DAAS,CAAC,aAAa,CAAC;kCAAc,wDAAmB;gEAAC;IACnC;QAAvB,+DAAS,CAAC,WAAW,CAAC;kCAAY,wDAAU;8DAAC;IAtCnC,uBAAuB;QAJnC,+DAAS,CAAC;YACT,QAAQ,EAAE,sBAAsB;;SAEjC,CAAC;yCAyCyB,+DAAiB;OAxC/B,uBAAuB,CAgHnC;IAAD,8BAAC;CAAA;AAhHmC;;;;;;;;;;;;;;;;;;;;;;;;ACVpC;AAAA;AAAA,iBAAiB;AACiC;AACQ;AACb;AACR;;;;;;;;;;;;;;;;;;;;;;;;;;ACJU;AACe;AAE0B;AAChB;AACR;AAehE;IAAA;IAaA,CAAC;yBAbY,gBAAgB;IAEpB,wBAAO,GAAd,UAAe,MAAyB;QACtC,MAAM,CAAC;YACL,QAAQ,EAAE,kBAAgB;YAC1B,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,4EAAgB;oBACzB,QAAQ,EAAE,MAAM;iBACjB;aACF;SACF,CAAC;IACJ,CAAC;IAZU,gBAAgB;QAb5B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;aACb;YACD,YAAY,EAAE;gBACZ,oFAAmB;gBACnB,oGAA2B;aAC5B;YACD,OAAO,EAAE;gBACP,oFAAmB;gBACnB,oGAA2B;aAC5B;SACF,CAAC;OACW,gBAAgB,CAa5B;IAAD,uBAAC;;CAAA;AAb4B;;;;;;;;;;;;;;;;;;;;;;;;;;ACRN;AAE+B;AAKtD;IAqFI,gCACc,QAAmB,EACnB,aAA4B,EAC5B,MAAyB;QAFzB,aAAQ,GAAR,QAAQ,CAAW;QACnB,kBAAa,GAAb,aAAa,CAAe;QAC5B,WAAM,GAAN,MAAM,CAAmB;QAtFvC;;UAEE;QACiB,iCAA4B,GAAG,qBAAqB,CAAC;QAExE;;WAEG;QACgB,4BAAuB,GAAG,YAAY,CAAC;QAE1D;;WAEG;QACgB,0BAAqB,GAAG,yBAAyB,CAAC;QAQrE;;WAEG;QACM,SAAI,GAAsB,OAAO,CAAC;QAO3C;;UAEE;QACO,aAAQ,GAAG,CAAC,CAAC;QAEtB;;;WAGG;QACO,YAAO,GAAG,IAAI,0DAAY,EAAU,CAAC;QAE/C;;UAEE;QACQ,SAAI,GAAG,IAAI,0DAAY,EAAU,CAAC;QAoB5C;;;WAGG;QACO,6BAAwB,GAAG,KAAK,CAAC;QAE3C;;WAEG;QACI,aAAQ,GAAG,KAAK,CAAC;IAcxB,CAAC;IAYD,yCAAQ,GAAR;QACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACf,MAAM,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3C,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,KAAK,kEAAa,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC1D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;gBACvC,MAAM,KAAK,CAAC,6CAA6C,CAAC,CAAC;YAC/D,CAAC;YAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC;QACvD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,KAAK,kEAAa,CAAC,UAAU,CAAC,CAAC,CAAC;YACzD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBACjC,MAAM,KAAK,CAAC,oCAAoC,CAAC,CAAC;YACtD,CAAC;YAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC;QACjD,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,KAAK,CAAC,+BAA6B,IAAI,CAAC,aAAa,OAAI,CAAC,CAAC;QACrE,CAAC;QAED,IAAI,CAAC,cAAc,EAAE,CAAC;IAC1B,CAAC;IAED,4CAAW,GAAX,UAAY,OAAsB;QAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,cAAc,EAAE,CAAC;QAC1B,CAAC;IACL,CAAC;IAED,4CAAW,GAAX;QACI,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,GAAG,EAAE,CAAC;QAC/C,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,GAAG,EAAE,CAAC;QACxC,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,GAAG,EAAE,CAAC;IAC9C,CAAC;IAED;;MAEE;IACF,4CAAW,GAAX;QACI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACzD,CAAC;IAED;;MAEE;IACF,6CAAY,GAAZ;QACI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAED;;MAEE;IACF,6CAAY,GAAZ;QACI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC5C,CAAC;IAED;;MAEE;IACF,mDAAkB,GAAlB;QACI,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAChC,CAAC;IAED;;MAEE;IACF,8CAAa,GAAb;QACI,IAAI,CAAC,cAAc,EAAE,CAAC;IAC1B,CAAC;IAES,kDAAiB,GAA3B,UAA4B,aAAqB;QAC7C,IAAM,WAAW,GAAG,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QAE3D,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACf,MAAM,KAAK,CAAC,8BAA4B,aAAa,oBAAiB,CAAC,CAAC;QAC5E,CAAC;QAED,sBAAsB;QACtB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAE/B,0BAA0B;QAC1B,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAChD,CAAC;IAED;;MAEE;IACQ,gDAAe,GAAzB;QACI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,EAAE,EAAE,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;IACxG,CAAC;IAED;;;OAGG;IACO,+CAAc,GAAxB,UAAyB,QAAa;QAClC,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;QAChC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE5B,EAAE,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,YAAY,EAAE,CAAC;QACxB,CAAC;IACL,CAAC;IAED;;MAEE;IACQ,sDAAqB,GAA/B;QACI,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,GAAG,EAAE,CAAC;QAC1C,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QAEvB,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACnC,CAAC;IAED;;;MAGE;IACQ,wDAAuB,GAAjC;QACI,IAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,CAAC,SAAS,GAAG,EAAE,CAAC;QACtB,MAAM,CAAC,GAAG;YACN,oDAAkD,IAAI,CAAC,4BAA4B,wBAAmB,IAAI,CAAC,gBAAgB,EAAI,CAAC;QACpI,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;QACpB,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;QAEpB,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IAC7D,CAAC;IAES,iDAAgB,GAA1B;QACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,EAAE,CAAC;QACd,CAAC;QAED,MAAM,CAAC,SAAO,IAAI,CAAC,EAAI,CAAC;IAC5B,CAAC;IAEO,sDAAqB,GAA7B;QACI,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC,kBAAkB,EAAE,CAAC;IAC3C,CAAC;IAED;;;MAGE;IACM,sDAAqB,GAA7B;QACI,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC;YACxC,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,+CAAc,GAAtB;QACI,yBAAyB;QACzB,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAE5B,wDAAwD;QACxD,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAE/B,8FAA8F;QAC9F,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE3E,0CAA0C;QAC1C,IAAI,CAAC,qBAAqB,EAAE,CAAC;IACjC,CAAC;IAED;;MAEE;IACM,+CAAc,GAAtB;QACI,oDAAoD;QACpD,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC;QAE/B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACrB,MAAM,KAAK,CAAC,6CAA6C,CAAC,CAAC;QAC/D,CAAC;QAED,cAAc;QACd,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QAErB,kBAAkB;QAClB,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QAEjB,iBAAiB;QACjB,IAAI,CAAC,eAAe,EAAE,CAAC;IAC3B,CAAC;IAEO,kDAAiB,GAAzB;QACI,MAAM,CAAC,oBAAkB,IAAI,CAAC,qBAAqB,EAAI,CAAC;IAC5D,CAAC;IAEO,wDAAuB,GAA/B;QACI,uBAAuB;QACvB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAE9C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACtB,MAAM,KAAK,CAAC,4BAA4B,CAAC,CAAC;QAC9C,CAAC;QAED,kBAAkB;QAClB,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,SAAS,GAAG,EAAE,CAAC;QAErD,iCAAiC;QACjC,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACnD,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC;QAEhC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;QAE1E,sBAAsB;QACtB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC/C,CAAC;IAEO,qDAAoB,GAA5B,UAA6B,IAAiB;QAC1C,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,GAAG,IAAI,CAAC;IAC9C,CAAC;IAEO,qDAAoB,GAA5B;QACI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;IAC9C,CAAC;IAvSQ;QAAR,2DAAK,EAAE;;wDAAmC;IAKlC;QAAR,2DAAK,EAAE;;sDAAY;IAKX;QAAR,2DAAK,EAAE;;4DAAc;IAMZ;QAAT,4DAAM,EAAE;;2DAAsC;IAKrC;QAAT,4DAAM,EAAE;;wDAAmC;IAEX;QAAhC,+DAAS,CAAC,oBAAoB,CAAC;kCAAqB,wDAAU;sEAAC;IAChC;QAA/B,+DAAS,CAAC,mBAAmB,CAAC;kCAAoB,wDAAU;qEAAC;IAgRlE,6BAAC;CAAA;AAlU2C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBoD;AAE5B;AACd;AACA;AAStD;IAAiD,+CAAsB;IAiBrE,qCACY,QAAmB,EACP,MAAwB;QAFhD,YAIE,kBAAM,QAAQ,EAAE,kEAAa,CAAC,kBAAkB,EAAE,MAAM,CAAC,SAC1D;QAJW,cAAQ,GAAR,QAAQ,CAAW;QACP,YAAM,GAAN,MAAM,CAAkB;QAjBhD;;WAEG;QACgB,UAAI,GAAG,WAAW,CAAC;QAEtC;;WAEG;QACM,WAAK,GAA4C,aAAa,CAAC;;IAYxE,CAAC;IAED,iDAAW,GAAX,UAAY,OAAsB;QAChC,iBAAM,WAAW,YAAC,OAAO,CAAC,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,6CAAO,GAAP;QACE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAEjE,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;QAErC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAES,0DAAoB,GAA9B;IACA,CAAC;IAED;;MAEE;IACQ,0DAAoB,GAA9B;QAAA,iBASC;QARC,MAAM,CAAC;YACL,SAAS,EAAE,IAAI,CAAC,OAAO;YACvB,UAAU,EAAE,UAAC,QAAQ,IAAK,YAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAA7B,CAA6B;YACvD,OAAO,EAAE,IAAI,CAAC,KAAK;YACnB,MAAM,EAAE,IAAI,CAAC,IAAI;YACjB,UAAU,EAAE,IAAI,CAAC,QAAQ;YACzB,MAAM,EAAE,IAAI,CAAC,IAAI;SAClB,CAAC;IACJ,CAAC;IA5CQ;QAAR,2DAAK,EAAE;;8DAAgE;IAK/D;QAAR,2DAAK,EAAE;;2DAAY;IAfT,2BAA2B;QANvC,+DAAS,CAAC;YACT,QAAQ,EAAE,yBAAyB;YACnC,QAAQ,EAAE,uEAEsB;SACjC,CAAC;QAoBG,yEAAQ,EAAE;yCADS,uDAAS;YACC,kEAAgB;OAnBrC,2BAA2B,CAuDvC;IAAD,kCAAC;CAAA,CAvDgD,gFAAsB,GAuDtE;AAvDuC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHjB;AAE6C;AACd;AACA;AAQtD;IAAyC,uCAAsB;IAqC7D,6BACY,QAAmB,EACP,MAAwB;QAFhD,YAIE,kBAAM,QAAQ,EAAE,kEAAa,CAAC,UAAU,EAAE,MAAM,CAAC,SAClD;QAJW,cAAQ,GAAR,QAAQ,CAAW;QACP,YAAM,GAAN,MAAM,CAAkB;QArChD;;UAEE;QACiB,mCAA6B,GAAG,4BAA4B,CAAC;QAEhF;;UAEE;QACiB,oCAA8B,GAAG,6BAA6B,CAAC;QAElF;;WAEG;QACM,WAAK,GAAqB,OAAO,CAAC;QAE3C;;UAEE;QACO,UAAI,GAAyB,QAAQ,CAAC;QAO/C;;UAEE;QACQ,YAAM,GAAG,IAAI,0DAAY,EAAQ,CAAC;QAE5C;;UAEE;QACQ,WAAK,GAAG,IAAI,0DAAY,EAAQ,CAAC;;IAO3C,CAAC;IAED,yCAAW,GAAX,UAAY,OAAsB;QAChC,iBAAM,WAAW,YAAC,OAAO,CAAC,CAAC;IAC7B,CAAC;IAED,yCAAW,GAAX;QACE,iBAAM,WAAW,WAAE,CAAC;QAEpB,MAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC,GAAG,EAAE,CAAC;QAChD,MAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,GAAG,EAAE,CAAC;IACnD,CAAC;IAES,kDAAoB,GAA9B;QACE,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAED;;MAEE;IACQ,kDAAoB,GAA9B;QAAA,iBAWC;QAVC,MAAM,CAAC;YACL,SAAS,EAAE,IAAI,CAAC,OAAO;YACvB,UAAU,EAAE,UAAC,QAAQ,IAAK,YAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAA7B,CAA6B;YACvD,kBAAkB,EAAE,cAAM,YAAI,CAAC,oBAAoB,EAAE,EAA3B,CAA2B;YACrD,gBAAgB,EAAE,cAAM,YAAI,CAAC,mBAAmB,EAAE,EAA1B,CAA0B;YAClD,OAAO,EAAE,IAAI,CAAC,KAAK;YACnB,MAAM,EAAE,IAAI,CAAC,IAAI;YACjB,MAAM,EAAE,IAAI,CAAC,IAAI;YACjB,UAAU,EAAE,IAAI,CAAC,QAAQ;SAC1B,CAAC;IACJ,CAAC;IAED;;MAEE;IACM,+CAAiB,GAAzB;QACE,MAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjF,MAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrF,CAAC;IAED;;MAEE;IACM,iDAAmB,GAA3B;QACE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;IACpB,CAAC;IAED;;OAEG;IACK,kDAAoB,GAA5B;QACE,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QAEnB,mCAAmC;QACnC,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAnFQ;QAAR,2DAAK,EAAE;;sDAAmC;IAKlC;QAAR,2DAAK,EAAE;;qDAAuC;IAKtC;QAAR,2DAAK,EAAE;;mDAAY;IAKV;QAAT,4DAAM,EAAE;;uDAAmC;IAKlC;QAAT,4DAAM,EAAE;;sDAAkC;IAnChC,mBAAmB;QAN/B,+DAAS,CAAC;YACT,QAAQ,EAAE,gBAAgB;YAC1B,QAAQ,EAAE,uEAEsB;SACjC,CAAC;QAwCG,yEAAQ,EAAE;yCADS,uDAAS;YACC,kEAAgB;OAvCrC,mBAAmB,CAmG/B;IAAD,0BAAC;CAAA,CAnGwC,gFAAsB,GAmG9D;AAnG+B;;;;;;;;;;;;;;;ACtBhC,IAAY,aAIX;AAJD,WAAY,aAAa;IAErB,6EAAkB;IAClB,6DAAU;AACd,CAAC,EAJW,aAAa,KAAb,aAAa,QAIxB;;;;;;;;;;;;;;ACCD;AAAA;IAAA;IAIA,CAAC;IAAD,uBAAC;AAAD,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./demo/$$_lazy_route_resource lazy recursive\";","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { DemoModule } from './src/demo.module';\n\nplatformBrowserDynamic().bootstrapModule(DemoModule)\n  .catch(err => console.log(err));\n","module.exports = \"<header>\\r\\n    <nav class=\\\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\\\">\\r\\n        <a class=\\\"navbar-brand\\\" routerLink=\\\"/installation\\\">Captcha for Angular 6+</a>\\r\\n        <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarCollapse\\\" aria-controls=\\\"navbarCollapse\\\"\\r\\n            aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\r\\n            <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n        </button>\\r\\n        <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarCollapse\\\">\\r\\n            <ul class=\\\"navbar-nav mr-auto\\\">\\r\\n                <li class=\\\"nav-item\\\">\\r\\n                    <a class=\\\"nav-link \\\" routerLink=\\\"/installation\\\">Installation</a>\\r\\n                </li>\\r\\n                <li class=\\\"nav-item\\\">\\r\\n                    <a class=\\\"nav-link \\\" routerLink=\\\"/recaptcha2\\\">reCAPTCHA2</a>\\r\\n                </li>\\r\\n                <li class=\\\"nav-item\\\">\\r\\n                    <a class=\\\"nav-link \\\" routerLink=\\\"/invisible\\\">Invisible reCAPTCHA</a>\\r\\n                </li>\\r\\n            </ul>\\r\\n            <div class=\\\"mt-2 mt-md-0\\\">\\r\\n                <a href=\\\"https://github.com/Enngage/ngx-captcha\\\">\\r\\n                    <button class=\\\"btn my-2 my-sm-0\\\" type=\\\"submit\\\">GitHub</button>\\r\\n                </a>\\r\\n            </div>\\r\\n        </div>\\r\\n    </nav>\\r\\n</header>\\r\\n\\r\\n<main role=\\\"main\\\" style=\\\"margin-top: 90px\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <router-outlet></router-outlet>\\r\\n    </div>\\r\\n</main>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './demo.component.html',\n})\nexport class DemoComponent {\n\n  public year = new Date().getFullYear();\n}\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { NgxCaptchaModule } from '../../src';\r\nimport { DemoComponent } from './demo.component';\r\nimport { DemoRoutes } from './demo.routes';\r\nimport { InstallationComponent } from './installation.component';\r\nimport { InvisibleReCaptchaDemoComponent } from './invisible-recaptcha-demo.component';\r\nimport { ReCaptcha2DemoComponent } from './re-captcha-2-demo.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule,\r\n    BrowserModule,\r\n    NgxCaptchaModule.forRoot({\r\n      reCaptcha2SiteKey: '6LcvoUgUAAAAAJJbhcXvLn3KgG-pyULLusaU4mL1',\r\n      invisibleCaptchaSiteKey: '6LckpEgUAAAAACPcjmrg1Es-GnTltKx0MP61FBO8'\r\n    }),\r\n    DemoRoutes\r\n  ],\r\n  declarations: [\r\n    DemoComponent,\r\n    InvisibleReCaptchaDemoComponent,\r\n    ReCaptcha2DemoComponent,\r\n    InstallationComponent\r\n  ],\r\n\r\n  bootstrap: [DemoComponent]\r\n})\r\nexport class DemoModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { DemoComponent } from './demo.component';\r\nimport { InvisibleReCaptchaDemoComponent } from './invisible-recaptcha-demo.component';\r\nimport { ReCaptcha2DemoComponent } from './re-captcha-2-demo.component';\r\nimport { InstallationComponent } from './installation.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n    ],\r\n    imports: [\r\n        RouterModule.forRoot([\r\n            {\r\n                path: '', component: ReCaptcha2DemoComponent\r\n            },\r\n            {\r\n                path: 'installation', component: InstallationComponent\r\n            },\r\n            {\r\n                path: 'invisible', component: InvisibleReCaptchaDemoComponent\r\n            },\r\n            {\r\n                path: 'recaptcha2', component: ReCaptcha2DemoComponent\r\n            },\r\n        ])\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class DemoRoutes { }\r\n","module.exports = \"<h2>Installation</h2>\\r\\n\\r\\n\\r\\n<h5 class=\\\"mt-4\\\">npm</h5>\\r\\n\\r\\n<pre class=\\\"prettyprint mt-2\\\" [innerText]=\\\"installCode\\\"></pre>\\r\\n\\r\\n<h5 class=\\\"mt-4\\\">Import\\r\\n    <strong>NgxCaptchaModule</strong> to your app and configure Google keys\\r\\n</h5>\\r\\n\\r\\n<pre class=\\\"prettyprint mt-2\\\" [innerText]=\\\"importModuleCode\\\"></pre>\\r\\n\\r\\n<h5 class=\\\"mt-4\\\">Use</h5>\\r\\n<pre class=\\\"prettyprint mt-2\\\" [innerText]=\\\"exampleCode\\\"></pre>\"","import { AfterViewChecked, Component } from '@angular/core';\r\n\r\ndeclare var PR: any;\r\n\r\n@Component({\r\n  templateUrl: './installation.component.html',\r\n})\r\nexport class InstallationComponent implements AfterViewChecked {\r\n\r\n  public readonly installCode = `npm install ngx-captcha`;\r\n\r\n  public readonly importModuleCode = `\r\nimport { NgModule } from '@angular/core';\r\nimport { NgxCaptchaModule } from 'ngx-captcha';\r\n\r\n@NgModule({\r\n  imports: [\r\n    NgxCaptchaModule.forRoot({\r\n      reCaptcha2SiteKey: 'xxxx',\r\n      invisibleCaptchaSiteKey: 'yyy'\r\n    }),\r\n  })\r\n\r\nexport class AppModule { }\r\n\r\n`;\r\n\r\n  public readonly exampleCode = `\r\n<ngx-invisible-recaptcha\r\n  [type]=\"type\"\r\n  [badge]=\"badge\"\r\n  (load)=\"handleLoad()\"\r\n  (success)=\"handleSuccess($event)\">\r\n</ngx-invisible-recaptcha>\r\n\r\n`;\r\n\r\n  ngAfterViewChecked(): void {\r\n    this.prettify();\r\n  }\r\n\r\n  private prettify(): void {\r\n    if (window['PR']) {\r\n      PR.prettyPrint();\r\n    }\r\n  }\r\n}\r\n","module.exports = \"<div class=\\\"row featurette\\\">\\r\\n    <div class=\\\"col-md-7\\\">\\r\\n        <h2 class=\\\"featurette-heading\\\">Invisible reCAPTCHA\\r\\n        </h2>\\r\\n\\r\\n        <p class=\\\"mt-4\\\">\\r\\n            This is a completely dynamic implementation - try changing properties to immediately see changes in rendered captcha.\\r\\n        </p>\\r\\n\\r\\n        <table class=\\\"table mt-3\\\">\\r\\n            <thead>\\r\\n                <tr>\\r\\n                    <th>Property</th>\\r\\n                    <th>Values</th>\\r\\n                </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n                <tr>\\r\\n                    <td>Badge</td>\\r\\n                    <td>\\r\\n                        <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeBadge('bottomright')\\\">Bottomright</span> |\\r\\n                        <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeBadge('bottomleft')\\\">Bottomleft</span> |\\r\\n                        <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeBadge('inline')\\\">Inline</span>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>Type</td>\\r\\n                    <td>\\r\\n                        <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeType('image')\\\">Image</span> |\\r\\n                        <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeType('audio')\\\">Audio</span>\\r\\n                    </td>\\r\\n                </tr>\\r\\n            </tbody>\\r\\n        </table>\\r\\n\\r\\n        <table class=\\\"table mt-3\\\">\\r\\n            <thead>\\r\\n                <tr>\\r\\n                    <th>Method</th>\\r\\n                    <th>Description</th>\\r\\n                    <th>Action</th>\\r\\n                </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n                <tr>\\r\\n                    <td>execute</td>\\r\\n                    <td>Verifies captcha on the backround and returns captcha response</td>\\r\\n                    <td>\\r\\n                        <button class=\\\"btn btn-info\\\" (click)=\\\"execute()\\\">Try</button>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>getCurrentResponse</td>\\r\\n                    <td>Gets the latest submitted response</td>\\r\\n                    <td>\\r\\n                        <button class=\\\"btn btn-info\\\" (click)=\\\"getCurrentResponse()\\\">Try</button>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>getResponse</td>\\r\\n                    <td>Gets captcha response</td>\\r\\n                    <td>\\r\\n                        <button class=\\\"btn btn-info\\\" (click)=\\\"getResponse()\\\">Try</button>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>reset</td>\\r\\n                    <td>Resets captcha (does not reload script)</td>\\r\\n                    <td>\\r\\n                        <button class=\\\"btn btn-info\\\" (click)=\\\"reset()\\\">Try</button>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>reload</td>\\r\\n                    <td>Unsets global script & reloads captcha</td>\\r\\n                    <td>\\r\\n                        <button class=\\\"btn btn-info\\\" (click)=\\\"reload()\\\">Try</button>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>getCaptchaId</td>\\r\\n                    <td>Gets Id of captcha</td>\\r\\n                    <td>\\r\\n                        <button class=\\\"btn btn-info\\\" (click)=\\\"getCaptchaId()\\\">Try</button>\\r\\n                    </td>\\r\\n                </tr>\\r\\n            </tbody>\\r\\n        </table>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-5\\\">\\r\\n        <h4>Live example</h4>\\r\\n        <ngx-invisible-recaptcha #captchaElem (load)=\\\"handleLoad()\\\" (success)=\\\"handleSuccess($event)\\\" [type]=\\\"type\\\" [badge]=\\\"badge\\\">\\r\\n        </ngx-invisible-recaptcha>\\r\\n\\r\\n        <h4 class=\\\"mt-3\\\">Status</h4>\\r\\n        <div>\\r\\n            <ul class=\\\"alt\\\">\\r\\n                <li>\\r\\n                    <span>Loaded: </span>\\r\\n                    <i *ngIf=\\\"!captchaIsLoaded\\\" class=\\\"fas fa-times text-danger\\\"></i>\\r\\n                    <i *ngIf=\\\"captchaIsLoaded\\\" class=\\\"fas fa-check text-success\\\"></i>\\r\\n                </li>\\r\\n                <li>\\r\\n                    <span>Captcha success: </span>\\r\\n                    <i *ngIf=\\\"!captchaSuccess\\\" class=\\\"fas fa-times text-danger\\\"></i>\\r\\n                    <i *ngIf=\\\"captchaSuccess\\\" class=\\\"fas fa-check text-success\\\"></i>\\r\\n                </li>\\r\\n            </ul>\\r\\n        </div>\\r\\n\\r\\n        <h4 class=\\\"mt-3\\\">Code</h4>\\r\\n        <pre class=\\\"prettyprint\\\" [innerText]=\\\"exampleCode\\\"></pre>\\r\\n    </div>\\r\\n</div>\"","import { AfterViewChecked, ChangeDetectorRef, Component, ElementRef, ViewChild } from '@angular/core';\r\n\r\nimport { InvisibleReCaptchaComponent } from '../../src';\r\n\r\ndeclare var PR: any;\r\n\r\n@Component({\r\n  selector: 'ngx-invisible-recaptcha-demo',\r\n  templateUrl: './invisible-recaptcha-demo.component.html',\r\n})\r\nexport class InvisibleReCaptchaDemoComponent implements AfterViewChecked {\r\n\r\n  public readonly exampleCode = `\r\n<ngx-invisible-recaptcha #captchaElem\r\n  [type]=\"type\"\r\n  [badge]=\"badge\"\r\n  (load)=\"handleLoad()\"\r\n  (success)=\"handleSuccess($event)\">\r\n</ngx-invisible-recaptcha>\r\n`;\r\n\r\n  public captchaIsLoaded = false;\r\n  public captchaSuccess = false;\r\n  public captchaResponse?: string;\r\n\r\n  public badge: 'bottomright' | 'bottomleft' | 'inline' = 'inline';\r\n  public type: 'image' | 'audio';\r\n\r\n  @ViewChild('captchaElem') captchaElem: InvisibleReCaptchaComponent;\r\n  @ViewChild('langInput') langInput: ElementRef;\r\n\r\n  ngAfterViewChecked(): void {\r\n    this.prettify();\r\n  }\r\n\r\n  constructor(private cdr: ChangeDetectorRef) {\r\n  }\r\n\r\n  execute(): void {\r\n    this.captchaElem.execute();\r\n  }\r\n\r\n  handleSuccess(captchaResponse: string): void {\r\n    this.captchaSuccess = true;\r\n    this.captchaResponse = captchaResponse;\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  handleLoad(): void {\r\n    this.captchaIsLoaded = true;\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  changeBadge(badge: 'bottomright' | 'bottomleft' | 'inline' = 'bottomright'): void {\r\n    this.badge = badge;\r\n  }\r\n\r\n  changeType(type: 'image' | 'audio'): void {\r\n    this.type = type;\r\n  }\r\n\r\n  getResponse(): void {\r\n    const response = this.captchaElem.getResponse();\r\n    if (!response) {\r\n      alert(`There is no response from grecaptcha script - try using 'getCurrentResponse' method or subscribe to 'success' event`);\r\n    } else {\r\n      alert(response);\r\n    }\r\n  }\r\n\r\n  reload(): void {\r\n    this.captchaElem.reloadCaptcha();\r\n  }\r\n\r\n  getCaptchaId(): void {\r\n    alert(this.captchaElem.getCaptchaId());\r\n  }\r\n\r\n  reset(): void {\r\n    this.captchaElem.resetCaptcha();\r\n  }\r\n\r\n  getCurrentResponse(): void {\r\n    alert(this.captchaElem.getCurrentResponse());\r\n  }\r\n\r\n  private prettify(): void {\r\n    if (window['PR']) {\r\n      PR.prettyPrint();\r\n    }\r\n  }\r\n}\r\n","module.exports = \"<div class=\\\"row featurette\\\">\\r\\n    <div class=\\\"col-md-7\\\">\\r\\n        <h2 class=\\\"featurette-heading\\\">Google reCAPTCHA2\\r\\n        </h2>\\r\\n\\r\\n        <p class=\\\"mt-4\\\">\\r\\n            This is a completely dynamic implementation - try changing properties to immediately see changes in rendered captcha.\\r\\n        </p>\\r\\n\\r\\n        <table class=\\\"table mt-3\\\">\\r\\n            <thead>\\r\\n                <tr>\\r\\n                    <th>Property</th>\\r\\n                    <th>Values</th>\\r\\n                </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n                <tr>\\r\\n                    <td>Theme</td>\\r\\n                    <td>\\r\\n                        <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeTheme('light')\\\">Light</span> |\\r\\n                        <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeTheme('dark')\\\">Dark</span>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>Language</td>\\r\\n                    <td>\\r\\n                        <div class=\\\"input-group\\\">\\r\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Culture code (i.e. 'en', 'es')\\\" #langInput [value]=\\\"lang\\\">\\r\\n                            <div class=\\\"input-group-append\\\">\\r\\n                                <button class=\\\"btn btn-info\\\" (click)=\\\"setLanguage()\\\">Set</button>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>Size</td>\\r\\n                    <td>\\r\\n                        <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeSize('compact')\\\">Compact</span> |\\r\\n                        <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeSize('normal')\\\">Normal</span>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>Type</td>\\r\\n                    <td>\\r\\n                        <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeType('image')\\\">Image</span> |\\r\\n                        <span style=\\\"cursor:pointer\\\" class=\\\"text-primary\\\" (click)=\\\"changeType('audio')\\\">Audio</span>\\r\\n                    </td>\\r\\n                </tr>\\r\\n            </tbody>\\r\\n        </table>\\r\\n\\r\\n        <table class=\\\"table mt-3\\\">\\r\\n            <thead>\\r\\n                <tr>\\r\\n                    <th>Method</th>\\r\\n                    <th>Description</th>\\r\\n                    <th>Action</th>\\r\\n                </tr>\\r\\n            </thead>\\r\\n            <tbody>\\r\\n                <tr>\\r\\n                    <td>getCurrentResponse</td>\\r\\n                    <td>Gets the latest submitted response</td>\\r\\n                    <td>\\r\\n                        <button class=\\\"btn btn-info\\\" (click)=\\\"getCurrentResponse()\\\">Try</button>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>getResponse</td>\\r\\n                    <td>Gets captcha response</td>\\r\\n                    <td>\\r\\n                        <button class=\\\"btn btn-info\\\" (click)=\\\"getResponse()\\\">Try</button>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>reset</td>\\r\\n                    <td>Resets captcha (does not reload script)</td>\\r\\n                    <td>\\r\\n                        <button class=\\\"btn btn-info\\\" (click)=\\\"reset()\\\">Try</button>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>reload</td>\\r\\n                    <td>Unsets global script & reloads captcha</td>\\r\\n                    <td>\\r\\n                        <button class=\\\"btn btn-info\\\" (click)=\\\"reload()\\\">Try</button>\\r\\n                    </td>\\r\\n                </tr>\\r\\n                <tr>\\r\\n                    <td>getCaptchaId</td>\\r\\n                    <td>Gets Id of captcha</td>\\r\\n                    <td>\\r\\n                        <button class=\\\"btn btn-info\\\" (click)=\\\"getCaptchaId()\\\">Try</button>\\r\\n                    </td>\\r\\n                </tr>\\r\\n            </tbody>\\r\\n        </table>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-5\\\">\\r\\n        <h4>Live example</h4>\\r\\n        <ngx-recaptcha2 #captchaElem (expire)=\\\"handleExpire()\\\" (load)=\\\"handleLoad()\\\" (success)=\\\"handleSuccess($event)\\\" [size]=\\\"size\\\"\\r\\n            [hl]=\\\"lang\\\" [theme]=\\\"theme\\\" [type]=\\\"type\\\"></ngx-recaptcha2>\\r\\n\\r\\n        <h4 class=\\\"mt-3\\\">Status</h4>\\r\\n        <div>\\r\\n            <ul class=\\\"alt\\\">\\r\\n                <li>\\r\\n                    <span>Loaded: </span>\\r\\n                    <i *ngIf=\\\"!captchaIsLoaded\\\" class=\\\"fas fa-times text-danger\\\"></i>\\r\\n                    <i *ngIf=\\\"captchaIsLoaded\\\" class=\\\"fas fa-check text-success\\\"></i>\\r\\n                </li>\\r\\n                <li>\\r\\n                    <span>Captcha success: </span>\\r\\n                    <i *ngIf=\\\"!captchaSuccess\\\" class=\\\"fas fa-times text-danger\\\"></i>\\r\\n                    <i *ngIf=\\\"captchaSuccess\\\" class=\\\"fas fa-check text-success\\\"></i>\\r\\n                </li>\\r\\n                <li>\\r\\n                    <span>Captcha expired: </span>\\r\\n                    <i *ngIf=\\\"!captchaIsExpired\\\" class=\\\"fas fa-times text-danger\\\"></i>\\r\\n                    <i *ngIf=\\\"captchaIsExpired\\\" class=\\\"fas fa-check text-success\\\"></i>\\r\\n                </li>\\r\\n            </ul>\\r\\n        </div>\\r\\n\\r\\n        <h4 class=\\\"mt-3\\\">Code</h4>\\r\\n        <pre class=\\\"prettyprint\\\" [innerText]=\\\"exampleCode\\\"></pre>\\r\\n    </div>\\r\\n</div>\"","import { AfterViewChecked, ChangeDetectorRef, Component, ElementRef, ViewChild } from '@angular/core';\r\n\r\nimport { ReCaptcha2Component } from '../../src';\r\n\r\ndeclare var PR: any;\r\n\r\n@Component({\r\n  selector: 'ngx-recaptcha-2-demo',\r\n  templateUrl: './re-captcha-2-demo.component.html',\r\n})\r\nexport class ReCaptcha2DemoComponent implements AfterViewChecked {\r\n\r\n  public readonly installCode = `\r\n  npm install ngx-captcha`;\r\n\r\n  public readonly importModuleCode = `\r\nimport { NgModule } from '@angular/core';\r\nimport { NgxCaptchaModule } from 'ngx-captcha';\r\n\r\n@NgModule({\r\n  imports: [\r\n    NgxCaptchaModule\r\n  })\r\n\r\n  export class AppModule { }`;\r\n\r\n  public readonly exampleCode = `\r\n<ngx-recaptcha2 #captchaElem\r\n  [size]=\"size\"\r\n  [hl]=\"lang\"\r\n  [theme]=\"theme\"\r\n  [type]=\"type\"\r\n  (expire)=\"handleExpire()\"\r\n  (load)=\"handleLoad()\"\r\n  (success)=\"handleSuccess($event)\">\r\n</ngx-recaptcha2>`;\r\n\r\n  public captchaIsLoaded = false;\r\n  public captchaSuccess = false;\r\n  public captchaIsExpired = false;\r\n  public captchaResponse?: string;\r\n\r\n  public theme: 'light' | 'dark' = 'light';\r\n  public size: 'compact' | 'normal' = 'normal';\r\n  public lang = 'en';\r\n  public type: 'image' | 'audio';\r\n\r\n  @ViewChild('captchaElem') captchaElem: ReCaptcha2Component;\r\n  @ViewChild('langInput') langInput: ElementRef;\r\n\r\n  constructor(private cdr: ChangeDetectorRef) {\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    this.prettify();\r\n  }\r\n\r\n  handleSuccess(captchaResponse: string): void {\r\n    this.captchaSuccess = true;\r\n    this.captchaResponse = captchaResponse;\r\n    this.captchaIsExpired = false;\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  handleLoad(): void {\r\n    this.captchaIsLoaded = true;\r\n    this.captchaIsExpired = false;\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  handleExpire(): void {\r\n    this.captchaSuccess = false;\r\n    this.captchaIsExpired = true;\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  changeTheme(theme: 'light' | 'dark'): void {\r\n    this.theme = theme;\r\n  }\r\n\r\n  changeSize(size: 'compact' | 'normal'): void {\r\n    this.size = size;\r\n  }\r\n\r\n  changeType(type: 'image' | 'audio'): void {\r\n    this.type = type;\r\n  }\r\n\r\n  setLanguage(): void {\r\n    this.lang = this.langInput.nativeElement.value;\r\n  }\r\n\r\n  getCurrentResponse(): void {\r\n    alert(this.captchaElem.getCurrentResponse());\r\n  }\r\n\r\n  getResponse(): void {\r\n    const response = this.captchaElem.getResponse();\r\n    if (!response) {\r\n      alert('There is no response - have you submitted captcha?');\r\n    } else {\r\n      alert(response);\r\n    }\r\n  }\r\n\r\n  reload(): void {\r\n    this.captchaElem.reloadCaptcha();\r\n  }\r\n\r\n  getCaptchaId(): void {\r\n    alert(this.captchaElem.getCaptchaId());\r\n  }\r\n\r\n  reset(): void {\r\n    this.captchaElem.resetCaptcha();\r\n  }\r\n\r\n  private prettify(): void {\r\n    if (window['PR']) {\r\n      PR.prettyPrint();\r\n    }\r\n  }\r\n}\r\n","/** Public API */\r\nexport * from './recaptcha/recaptcha-2.component';\r\nexport * from './recaptcha/invisible-recaptcha.component';\r\nexport * from './recaptcha/recaptcha.config';\r\nexport * from './ngx-captcha.module';\r\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { InvisibleReCaptchaComponent } from './recaptcha/invisible-recaptcha.component';\nimport { ReCaptcha2Component } from './recaptcha/recaptcha-2.component';\nimport { NgxCaptchaConfig } from './recaptcha/recaptcha.config';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    ReCaptcha2Component,\n    InvisibleReCaptchaComponent\n  ],\n  exports: [\n    ReCaptcha2Component,\n    InvisibleReCaptchaComponent\n  ]\n})\nexport class NgxCaptchaModule {\n\n  static forRoot(config?: NgxCaptchaConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxCaptchaModule,\n      providers: [\n        {\n          provide: NgxCaptchaConfig,\n          useValue: config,\n        }\n      ]\n    };\n  }\n}\n\n\n","import {\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    Optional,\r\n    Output,\r\n    Renderer2,\r\n    SimpleChanges,\r\n    ViewChild,\r\n} from '@angular/core';\r\n\r\nimport { ReCaptchaType } from './recaptcha-type.enum';\r\nimport { NgxCaptchaConfig } from './recaptcha.config';\r\n\r\ndeclare var grecaptcha: any;\r\n\r\nexport abstract class BaseReCaptchaComponent implements OnInit, OnChanges, OnDestroy {\r\n\r\n    /**\r\n    * Name of the global callback\r\n    */\r\n    protected readonly windowOnLoadCallbackProperty = 'ngx_onload_callback';\r\n\r\n    /**\r\n     * Name of the global reCaptcha property\r\n     */\r\n    protected readonly globalReCaptchaProperty = 'grecaptcha';\r\n\r\n    /**\r\n     * Name of the global property holding captcha element\r\n     */\r\n    protected readonly globalCaptchaElemName = 'ngx_onload_captcha_elem';\r\n\r\n    /**\r\n      * Google's site key.\r\n      * You can find this under https://www.google.com/recaptcha\r\n      */\r\n    protected siteKey?: string;\r\n\r\n    /**\r\n     * Type\r\n     */\r\n    @Input() type: 'audio' | 'image' = 'image';\r\n\r\n    /**\r\n     * Language code. Auto-detects the user's language if unspecified.\r\n     */\r\n    @Input() hl: string;\r\n\r\n    /**\r\n    * Tab index\r\n    */\r\n    @Input() tabIndex = 0;\r\n\r\n    /**\r\n     * Called when captcha receives successful response.\r\n     * Captcha response token is passed to event.\r\n     */\r\n    @Output() success = new EventEmitter<string>();\r\n\r\n    /**\r\n    * Called when captcha is loaded. Event receives id of the captcha\r\n    */\r\n    @Output() load = new EventEmitter<number>();\r\n\r\n    @ViewChild('captchaWrapperElem') captchaWrapperElem: ElementRef;\r\n    @ViewChild('captchaScriptElem') captchaScriptElem: ElementRef;\r\n\r\n    /**\r\n     * Captcha element\r\n     */\r\n    protected captchaElem?: HTMLElement;\r\n\r\n    /**\r\n     * Holds last response value\r\n     */\r\n    protected currentResponse?: string;\r\n\r\n    /**\r\n     * Id of the captcha\r\n     */\r\n    protected captchaId: number;\r\n\r\n    /**\r\n     * If enabled, captcha will reset after receiving success response. This is useful\r\n     * when invisible captcha need to be resolved multiple times on same page\r\n     */\r\n    protected resetCaptchaAfterSuccess = false;\r\n\r\n    /**\r\n     * Indicates if captcha is loaded\r\n     */\r\n    public isLoaded = false;\r\n\r\n    /**\r\n    * Reference to global reCaptcha API\r\n    */\r\n    public reCaptchaApi?: any;\r\n\r\n    public captchaElemId?: string;\r\n\r\n    constructor(\r\n        protected renderer: Renderer2,\r\n        protected recaptchaType: ReCaptchaType,\r\n        protected config?: NgxCaptchaConfig,\r\n    ) {\r\n    }\r\n\r\n    /**\r\n    * Gets reCaptcha properties\r\n    */\r\n    protected abstract getCaptchaProperties(): any;\r\n\r\n    /**\r\n     * Used for captcha specific setup\r\n    */\r\n    protected abstract captchaSpecificSetup(): void;\r\n\r\n    ngOnInit(): void {\r\n        if (!this.config) {\r\n            throw Error(`Config was not provided`);\r\n        }\r\n\r\n        if (this.recaptchaType === ReCaptchaType.InvisibleReCaptcha) {\r\n            if (!this.config.invisibleCaptchaSiteKey) {\r\n                throw Error(`SiteKey for invisible reCaptcha is not set!`);\r\n            }\r\n\r\n            this.siteKey = this.config.invisibleCaptchaSiteKey;\r\n        } else if (this.recaptchaType === ReCaptchaType.ReCaptcha2) {\r\n            if (!this.config.reCaptcha2SiteKey) {\r\n                throw Error(`SiteKey for reCaptcha2 is not set!`);\r\n            }\r\n\r\n            this.siteKey = this.config.reCaptcha2SiteKey;\r\n        } else {\r\n            throw Error(`Unsupported captcha type '${this.recaptchaType}'!`);\r\n        }\r\n\r\n        this.setupComponent();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (this.isLoaded) {\r\n            this.setupComponent();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        window[this.windowOnLoadCallbackProperty] = {};\r\n        window[this.globalCaptchaElemName] = {};\r\n        window[this.globalReCaptchaProperty] = {};\r\n    }\r\n\r\n    /**\r\n     * Gets captcha response as per reCaptcha docs\r\n    */\r\n    getResponse(): string {\r\n        return this.reCaptchaApi.getResponse(this.captchaId);\r\n    }\r\n\r\n    /**\r\n     * Gets Id of captcha widget\r\n    */\r\n    getCaptchaId(): number {\r\n        return this.captchaId;\r\n    }\r\n\r\n    /**\r\n    * Resets captcha\r\n    */\r\n    resetCaptcha(): void {\r\n        this.reCaptchaApi.reset(this.captchaId);\r\n    }\r\n\r\n    /**\r\n     * Gets last submitted captcha response\r\n    */\r\n    getCurrentResponse(): string | undefined {\r\n        return this.currentResponse;\r\n    }\r\n\r\n    /**\r\n     * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n    */\r\n    reloadCaptcha(): void {\r\n        this.setupComponent();\r\n    }\r\n\r\n    protected ensureCaptchaElem(captchaElemId: string): void {\r\n        const captchaElem = document.getElementById(captchaElemId);\r\n\r\n        if (!captchaElem) {\r\n            throw Error(`Captcha element with id '${captchaElemId}' was not found`);\r\n        }\r\n\r\n        // assign captcha alem\r\n        this.captchaElem = captchaElem;\r\n\r\n        // set global captcha elem\r\n        this.setGlobalCaptchaElem(this.captchaElem);\r\n    }\r\n\r\n    /**\r\n     * Responsible for instantiating captcha element\r\n    */\r\n    protected renderReCaptcha(): void {\r\n        this.captchaId = this.reCaptchaApi.render(this.getGlobalCaptchaElem(), this.getCaptchaProperties());\r\n    }\r\n\r\n    /**\r\n     * Called when captcha receives response\r\n     * @param callback Callback\r\n     */\r\n    protected handleCallback(callback: any): void {\r\n        this.currentResponse = callback;\r\n        this.success.next(callback);\r\n\r\n        if (this.resetCaptchaAfterSuccess) {\r\n            this.resetCaptcha();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Registers reCaptcha script if its not available\r\n    */\r\n    protected ensureReCaptchaScript(): void {\r\n        window[this.globalReCaptchaProperty] = {};\r\n        this.reCaptchaApi = {};\r\n\r\n        this.registerReCaptchaScript();\r\n    }\r\n\r\n    /**\r\n     * Add script to page with reference to captcha API. This has to be done manually\r\n     * as we want to avoid adding script to main index.html\r\n    */\r\n    protected registerReCaptchaScript(): void {\r\n        const script = document.createElement('script');\r\n        script.innerHTML = '';\r\n        script.src =\r\n            `https://www.google.com/recaptcha/api.js?onload=${this.windowOnLoadCallbackProperty}&render=explicit${this.getLanguageParam()}`;\r\n        script.async = true;\r\n        script.defer = true;\r\n\r\n        this.captchaScriptElem.nativeElement.appendChild(script);\r\n    }\r\n\r\n    protected getLanguageParam(): string {\r\n        if (!this.hl) {\r\n            return '';\r\n        }\r\n\r\n        return `&hl=${this.hl}`;\r\n    }\r\n\r\n    private getPseudoUniqueNumber(): number {\r\n        return new Date().getUTCMilliseconds();\r\n    }\r\n\r\n    /**\r\n     * Checks if reCaptcha Api is defined. It may happen that when navigating from angular component to another\r\n     * via router, the Api was already loaded previously. In such cases, do not render script again.\r\n    */\r\n    private isReCaptchaApiDefined(): boolean {\r\n        if (!window[this.globalReCaptchaProperty]) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private setupComponent(): void {\r\n        // captcha specific setup\r\n        this.captchaSpecificSetup();\r\n\r\n        // create captcha wrapper and set it to global namespace\r\n        this.createAndSetCaptchaElem();\r\n\r\n        // we need to patch the callback through global variable, otherwise callback is not accessible\r\n        window[this.windowOnLoadCallbackProperty] = this.onloadCallback.bind(this);\r\n\r\n        // create and put reCaptcha script to page\r\n        this.ensureReCaptchaScript();\r\n    }\r\n\r\n    /**\r\n    * Called when google's recaptcha script is ready\r\n    */\r\n    private onloadCallback(): void {\r\n        // assign reference to reCaptcha Api once its loaded\r\n        this.reCaptchaApi = grecaptcha;\r\n\r\n        if (!this.reCaptchaApi) {\r\n            throw Error(`ReCaptcha Api was not initialized correctly`);\r\n        }\r\n\r\n        // loaded flag\r\n        this.isLoaded = true;\r\n\r\n        // fire load event\r\n        this.load.next();\r\n\r\n        // render captcha\r\n        this.renderReCaptcha();\r\n    }\r\n\r\n    private generateNewElemId(): string {\r\n        return `ngx-captcha-id-${this.getPseudoUniqueNumber()}`;\r\n    }\r\n\r\n    private createAndSetCaptchaElem(): void {\r\n        // generate new elem id\r\n        this.captchaElemId = this.generateNewElemId();\r\n\r\n        if (!this.captchaElemId) {\r\n            throw Error(`Captcha elem Id is not set`);\r\n        }\r\n\r\n        // remove old html\r\n        this.captchaWrapperElem.nativeElement.innerHTML = '';\r\n\r\n        // create new wrapper for captcha\r\n        const newElem = this.renderer.createElement('div');\r\n        newElem.id = this.captchaElemId;\r\n\r\n        this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);\r\n\r\n        // update captcha elem\r\n        this.ensureCaptchaElem(this.captchaElemId);\r\n    }\r\n\r\n    private setGlobalCaptchaElem(elem: HTMLElement): void {\r\n        window[this.globalCaptchaElemName] = elem;\r\n    }\r\n\r\n    private getGlobalCaptchaElem(): HTMLElement {\r\n        return window[this.globalCaptchaElemName];\r\n    }\r\n}\r\n\r\n","import { Component, Input, OnChanges, Optional, Renderer2, SimpleChanges } from '@angular/core';\r\n\r\nimport { BaseReCaptchaComponent } from './base-recaptcha.component';\r\nimport { ReCaptchaType } from './recaptcha-type.enum';\r\nimport { NgxCaptchaConfig } from './recaptcha.config';\r\n\r\n\r\n@Component({\r\n  selector: 'ngx-invisible-recaptcha',\r\n  template: `\r\n  <div #captchaScriptElem></div>\r\n  <div #captchaWrapperElem></div>`\r\n})\r\nexport class InvisibleReCaptchaComponent extends BaseReCaptchaComponent implements OnChanges {\r\n\r\n  /**\r\n   * This size representing invisible captcha\r\n   */\r\n  protected readonly size = 'invisible';\r\n\r\n  /**\r\n   * Badge\r\n   */\r\n  @Input() badge: 'bottomright' | 'bottomleft' | 'inline' = 'bottomright';\r\n\r\n  /**\r\n   * Language code. Auto-detects the user's language if unspecified.\r\n   */\r\n  @Input() hl: string;\r\n\r\n  constructor(\r\n    protected renderer: Renderer2,\r\n    @Optional() protected config: NgxCaptchaConfig,\r\n  ) {\r\n    super(renderer, ReCaptchaType.InvisibleReCaptcha, config);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n\r\n  /**\r\n   * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n   */\r\n  execute(): string | undefined {\r\n    this.currentResponse = this.reCaptchaApi.execute(this.captchaId);\r\n\r\n    this.resetCaptchaAfterSuccess = true;\r\n\r\n    return this.currentResponse;\r\n  }\r\n\r\n  protected captchaSpecificSetup(): void {\r\n  }\r\n\r\n  /**\r\n  * Gets reCaptcha properties\r\n  */\r\n  protected getCaptchaProperties(): any {\r\n    return {\r\n      'sitekey': this.siteKey,\r\n      'callback': (response) => this.handleCallback(response),\r\n      'badge': this.badge,\r\n      'type': this.type,\r\n      'tabindex': this.tabIndex,\r\n      'size': this.size\r\n    };\r\n  }\r\n}\r\n\r\n","import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  Renderer2,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\n\r\nimport { BaseReCaptchaComponent } from './base-recaptcha.component';\r\nimport { ReCaptchaType } from './recaptcha-type.enum';\r\nimport { NgxCaptchaConfig } from './recaptcha.config';\r\n\r\n@Component({\r\n  selector: 'ngx-recaptcha2',\r\n  template: `\r\n  <div #captchaScriptElem></div>\r\n  <div #captchaWrapperElem></div>`\r\n})\r\nexport class ReCaptcha2Component extends BaseReCaptchaComponent implements OnChanges, OnDestroy {\r\n\r\n  /**\r\n  * Name of the global expire callback\r\n  */\r\n  protected readonly windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\r\n\r\n  /**\r\n  * Name of the global error callback\r\n  */\r\n  protected readonly windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\r\n\r\n  /**\r\n   * Theme\r\n   */\r\n  @Input() theme: 'dark' | 'light' = 'light';\r\n\r\n  /**\r\n  * Size\r\n  */\r\n  @Input() size: 'compact' | 'normal' = 'normal';\r\n\r\n  /**\r\n   * Language code. Auto-detects the user's language if unspecified.\r\n   */\r\n  @Input() hl: string;\r\n\r\n  /**\r\n  * Expired callback\r\n  */\r\n  @Output() expire = new EventEmitter<void>();\r\n\r\n  /**\r\n  * Error callback\r\n  */\r\n  @Output() error = new EventEmitter<void>();\r\n\r\n  constructor(\r\n    protected renderer: Renderer2,\r\n    @Optional() protected config: NgxCaptchaConfig,\r\n  ) {\r\n    super(renderer, ReCaptchaType.ReCaptcha2, config);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    super.ngOnChanges(changes);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n\r\n    window[this.windowOnErrorCallbackProperty] = {};\r\n    window[this.windowOnExpireCallbackProperty] = {};\r\n  }\r\n\r\n  protected captchaSpecificSetup(): void {\r\n    this.registerCallbacks();\r\n  }\r\n\r\n  /**\r\n   * Gets reCaptcha properties\r\n  */\r\n  protected getCaptchaProperties(): any {\r\n    return {\r\n      'sitekey': this.siteKey,\r\n      'callback': (response) => this.handleCallback(response),\r\n      'expired-callback': () => this.handleExpireCallback(),\r\n      'error-callback': () => this.handleErrorCallback(),\r\n      'theme': this.theme,\r\n      'type': this.type,\r\n      'size': this.size,\r\n      'tabindex': this.tabIndex\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Registers global callbacks\r\n  */\r\n  private registerCallbacks(): void {\r\n    window[this.windowOnErrorCallbackProperty] = this.handleErrorCallback.bind(this);\r\n    window[this.windowOnExpireCallbackProperty] = this.handleExpireCallback.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Handles error callback\r\n  */\r\n  private handleErrorCallback(): void {\r\n    this.error.next();\r\n  }\r\n\r\n  /**\r\n   * Handles expired callback\r\n   */\r\n  private handleExpireCallback(): void {\r\n    this.expire.next();\r\n\r\n    // reset captcha on expire callback\r\n    this.resetCaptcha();\r\n  }\r\n}\r\n\r\n","export enum ReCaptchaType {\r\n\r\n    InvisibleReCaptcha,\r\n    ReCaptcha2\r\n}\r\n","export interface INgxCaptchaConfig {\r\n    reCaptcha2SiteKey?: string;\r\n    invisibleCaptchaSiteKey?: string;\r\n}\r\n\r\nexport class NgxCaptchaConfig implements INgxCaptchaConfig {\r\n\r\n    public reCaptcha2SiteKey?: string;\r\n    public invisibleCaptchaSiteKey?: string;\r\n}\r\n"],"sourceRoot":""}